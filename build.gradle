buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		gradlePluginPortal()
		maven { url "https://repo.spring.io/plugins-release" }
	}
}


plugins {
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id "java"
	id "maven-publish"
	id "idea"
	id "jacoco"
	id "com.google.cloud.tools.jib"
	id "com.gorylenko.gradle-git-properties"
	id "org.openapi.generator"
	id "net.ltgt.apt-idea"
	id "net.ltgt.apt"
	id "org.sonarqube"
	id "io.spring.nohttp"
}

group = 'com.faceit.userservice'
version = '0.0.1-SNAPSHOT'
description = "Sample app for faceit"
sourceCompatibility = '1.8'
targetCompatibility=1.8
assert System.properties["java.specification.version"] == "1.8" || "11" || "12" || "13" || "14"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: "gradle/swagger.gradle"

if (project.hasProperty("prod")) {
	apply from: "gradle/profile_prod.gradle"
} else {
	apply from: "gradle/profile_dev.gradle"
}


defaultTasks "bootRun"

springBoot {
	mainClassName = "com.faceit.userservice.UserServiceApplication"
}

test {
	useJUnitPlatform()


	testLogging {
		events 'FAILED', 'SKIPPED'
	}
	reports.html.enabled = false
}

jacoco {
	toolVersion = "0.8.5"
	reportsDir = file("$buildDir/customJacocoReportDir")
}

task tests(type: Test) {
	useJUnitPlatform()
	description = "Execute tests."
	group = "verification"
	include "**/*Test*", "**/*IntTest*"

	testLogging {
		events 'FAILED', 'SKIPPED'
	}

	if (project.hasProperty('testcontainers')) {
		environment 'spring.profiles.active', 'testcontainers'
	}
	ignoreFailures true
	reports.html.enabled = false
}

check.dependsOn tests
task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn test
}

task testsReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn tests
}

if (!project.hasProperty("runList")) {
	project.ext.runList = "main"
}

gitProperties {
	failOnNoGitDirectory = false
	keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
	toolVersion '${checkstyle_version}'
	configFile file("checkstyle.xml")
	checkstyleTest.enabled = false
}
nohttp {
	source.include "build.gradle", "README.md"
}


configurations {
	providedRuntime
	implementation.exclude module: "spring-boot-starter-tomcat"
}


repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}

if (project.hasProperty("gae")) {
	apply plugin: 'maven'
	apply plugin: 'org.springframework.boot.experimental.thin-launcher'
	apply plugin: 'io.spring.dependency-management'

	dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
	}
	appengineStage.dependsOn thinResolve
}


dependencies {
	implementation "javax.annotation:javax.annotation-api"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
	implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
	implementation "com.fasterxml.jackson.core:jackson-annotations"
	implementation "com.fasterxml.jackson.core:jackson-databind"
	implementation "org.hibernate:hibernate-core"
	implementation "org.openapitools:jackson-databind-nullable:${jackson_databind_nullable_version}"
	implementation "javax.transaction:javax.transaction-api"
	implementation "org.hibernate:hibernate-entitymanager"
	implementation "org.hibernate.validator:hibernate-validator"
	implementation "org.springframework.boot:spring-boot-loader-tools"
	implementation "org.springframework.boot:spring-boot-starter-mail"
	implementation "org.springframework.boot:spring-boot-starter-logging"
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-aop"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation ("org.springframework.boot:spring-boot-starter-web") {
		exclude module: "spring-boot-starter-tomcat"
	}
	implementation "org.springframework.boot:spring-boot-starter-undertow"
	implementation "org.zalando:problem-spring-web:${zalando_version}"
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
	implementation "org.springframework.retry:spring-retry"
	implementation ("io.springfox:springfox-swagger2:${springfox_version}") {
		exclude module: "mapstruct"
	}
	implementation "io.springfox:springfox-bean-validators:${springfox_version}"
	implementation "mysql:mysql-connector-java"
	implementation "org.mapstruct:mapstruct:${mapstruct_version}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}"
	testImplementation ("org.springframework.boot:spring-boot-starter-test") {
		exclude group: "org.junit.vintage", module: "junit-vintage-engine"
	}
	testImplementation "org.springframework.boot:spring-boot-test"
	testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunit_junit5_version}"
	testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunit_junit5_version}"
	testImplementation "com.h2database:h2"
}

task cleanResources(type: Delete) {
	delete "build/resources"
}

wrapper {
	gradleVersion = "6.4.1"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
